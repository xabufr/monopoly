#include "case.h"

Case::Case(size_t id, const std::string& nom): m_id(id), m_nom(nom), m_propietaire(nullptr)
{
}
const std::string& Case::nom() const
{
	return m_nom;	
}
virtual void Case::joueurArrive(Joueur* j)
{
	m_joueurs.push_back(j);
}
virtual void Case::joueurPart(Joueur* j_partant)
{
	for(auto it=m_joueurs.begin(); it!=m_joueurs.end();++it)
	{
		if((*it)==j_partant)
		{
			m_joueurs.erase(it);
			return;
		}
	}
}
virtual void Case::joueurPasse(Joueur*)
{
}
virtual bool Case::peutAppartenir() const
{
	return false;
}
const std::list<Joueur*>& Case::getJoueurs() const
{
	return m_joueurs;
}
Joueur* Case::proprietaire() const
{
	return m_propietaire;
}
virtual bool Case::peutAcheter(const Joueur*) const
{
	return false;
}
virtual void Case::acheter(Joueur*)
{
	
}
size_t Case::id() const
{
	return m_id;
}
